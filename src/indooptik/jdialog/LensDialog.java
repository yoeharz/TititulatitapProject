/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package indooptik.jdialog;

import indooptik.dao.DAOFactory;
import indooptik.dao.LensDAO;
import indooptik.internalframe.FrameTransactionInternalFrame;
import indooptik.internalframe.LensInternalFrame;
import indooptik.model.Lens;
import java.math.BigDecimal;
import java.util.List;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author msacool
 */
public class LensDialog extends javax.swing.JDialog implements DocumentListener{
    private FrameTransactionInternalFrame frameTransactionInternalFrame;
    private DefaultTableModel dtm;
    private JTable table;
    private TableRowSorter cek;
    private LensDAO lensDAO;
    /**
     * Creates new form lensDialog
     */
    public LensDialog(JInternalFrame parent) {
        initComponents();
        
        frameTransactionInternalFrame = (FrameTransactionInternalFrame) parent;
        lensDAO = DAOFactory.create().getLensDAO();
        table = this.lensTbl;
        dtm = (DefaultTableModel) this.table.getModel();
        searchTxt.getDocument().addDocumentListener(this);
        cek = new TableRowSorter(dtm);
        table.setRowSorter(cek);
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new indooptik.utility.Panel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lensTbl = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pilih Lensa");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setOpaque(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cari");

        lensTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Tipe Lensa", "Variance Lensa", "Ukuran Lensa", "Warna Lensa", "Harga Lensa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(lensTbl);
        if (lensTbl.getColumnModel().getColumnCount() > 0) {
            lensTbl.getColumnModel().getColumn(0).setMinWidth(0);
            lensTbl.getColumnModel().getColumn(0).setMaxWidth(0);
            lensTbl.getColumnModel().getColumn(3).setMinWidth(85);
            lensTbl.getColumnModel().getColumn(3).setMaxWidth(85);
            lensTbl.getColumnModel().getColumn(4).setMinWidth(110);
            lensTbl.getColumnModel().getColumn(4).setMaxWidth(110);
        }

        jButton2.setText("Pilih");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTxt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        chooseData();
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable lensTbl;
    private indooptik.utility.Panel panel1;
    private javax.swing.JTextField searchTxt;
    // End of variables declaration//GEN-END:variables

    

    void showData(){
        List<Lens> listLens = lensDAO.retreiveALL();
        dtm.setRowCount(0);
        for (Lens lens : listLens) {
            Vector v = new Vector();
            v.add(lens.getIdLens());
            v.add(lens.getType());
            v.add(lens.getLensVariance());
            v.add(lens.getSizeType());
            v.add(lens.getColor());
            v.add(lens.getPrice());
            dtm.addRow(v);
        }
    }
    
    public void search() {
        RowFilter rf = RowFilter.regexFilter(this.searchTxt.getText(), 1, 2, 3, 4, 5);
        cek.setRowFilter(rf);
    }
    
    public Lens chooseData(){
        int selectedRow = this.table.getSelectedRow();
        Lens lens = null;
        if (selectedRow > -1) {
            lens = new Lens();
            lens.setIdLens(this.table.getValueAt(selectedRow, 0).hashCode());
            lens.setType(this.table.getValueAt(selectedRow, 1).toString());
            lens.setLensVariance(this.table.getValueAt(selectedRow, 2).toString());
            lens.setSizeType(this.table.getValueAt(selectedRow, 3).toString());
            lens.setColor(this.table.getValueAt(selectedRow, 4).toString());
            lens.setPrice(new BigDecimal(this.table.getValueAt(selectedRow, 5).toString()));
            
            setData(lens);
        }
        return lens;
    }
    
    public void setData(Lens lens){
        frameTransactionInternalFrame.getLensTxt().setText(lens.getType()+"/"+lens.getLensVariance()+"/"+lens.getSizeType());
        frameTransactionInternalFrame.getColorTxt().setText(lens.getColor());
        frameTransactionInternalFrame.getLensPriceTxt().setText("" + lens.getPrice());
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        search();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        search();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        search();
    }
}